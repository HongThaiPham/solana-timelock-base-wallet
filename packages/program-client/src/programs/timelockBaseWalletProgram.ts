/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeSolLockInstruction,
  type ParsedInitializeSplLockInstruction,
  type ParsedWithdrawSolLockInstruction,
  type ParsedWithdrawSplLockInstruction,
} from '../instructions';

export const TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS =
  '61DbVFQopKRi1kyCHBNdYeHHs5xE633Sen2JLFP91reU' as Address<'61DbVFQopKRi1kyCHBNdYeHHs5xE633Sen2JLFP91reU'>;

export enum TimelockBaseWalletProgramAccount {
  Vault,
}

export function identifyTimelockBaseWalletProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TimelockBaseWalletProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 8, 232, 43, 2, 152, 117, 119])
      ),
      0
    )
  ) {
    return TimelockBaseWalletProgramAccount.Vault;
  }
  throw new Error(
    'The provided account could not be identified as a timelockBaseWalletProgram account.'
  );
}

export enum TimelockBaseWalletProgramInstruction {
  InitializeSolLock,
  InitializeSplLock,
  WithdrawSolLock,
  WithdrawSplLock,
}

export function identifyTimelockBaseWalletProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TimelockBaseWalletProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 207, 142, 52, 191, 86, 74, 59])
      ),
      0
    )
  ) {
    return TimelockBaseWalletProgramInstruction.InitializeSolLock;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([72, 11, 0, 94, 170, 72, 6, 63])
      ),
      0
    )
  ) {
    return TimelockBaseWalletProgramInstruction.InitializeSplLock;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([99, 187, 190, 4, 134, 136, 196, 79])
      ),
      0
    )
  ) {
    return TimelockBaseWalletProgramInstruction.WithdrawSolLock;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 96, 133, 8, 55, 229, 81, 25])
      ),
      0
    )
  ) {
    return TimelockBaseWalletProgramInstruction.WithdrawSplLock;
  }
  throw new Error(
    'The provided instruction could not be identified as a timelockBaseWalletProgram instruction.'
  );
}

export type ParsedTimelockBaseWalletProgramInstruction<
  TProgram extends string = '61DbVFQopKRi1kyCHBNdYeHHs5xE633Sen2JLFP91reU',
> =
  | ({
      instructionType: TimelockBaseWalletProgramInstruction.InitializeSolLock;
    } & ParsedInitializeSolLockInstruction<TProgram>)
  | ({
      instructionType: TimelockBaseWalletProgramInstruction.InitializeSplLock;
    } & ParsedInitializeSplLockInstruction<TProgram>)
  | ({
      instructionType: TimelockBaseWalletProgramInstruction.WithdrawSolLock;
    } & ParsedWithdrawSolLockInstruction<TProgram>)
  | ({
      instructionType: TimelockBaseWalletProgramInstruction.WithdrawSplLock;
    } & ParsedWithdrawSplLockInstruction<TProgram>);
