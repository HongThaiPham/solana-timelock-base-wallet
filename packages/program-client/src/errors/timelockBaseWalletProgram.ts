/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS } from '../programs';

/** UnlockTimestampMustBeInFuture: Unlock timestamp must be in the future */
export const TIMELOCK_BASE_WALLET_PROGRAM_ERROR__UNLOCK_TIMESTAMP_MUST_BE_IN_FUTURE = 0x1770; // 6000
/** AmountMustBeGreaterThanZero: Amount must be greater than zero */
export const TIMELOCK_BASE_WALLET_PROGRAM_ERROR__AMOUNT_MUST_BE_GREATER_THAN_ZERO = 0x1771; // 6001
/** VaultLocked: Vault is locked */
export const TIMELOCK_BASE_WALLET_PROGRAM_ERROR__VAULT_LOCKED = 0x1772; // 6002
/** VaultLocking: Vault is locking */
export const TIMELOCK_BASE_WALLET_PROGRAM_ERROR__VAULT_LOCKING = 0x1773; // 6003
/** InvalidVaultMint: Invalid vault mint */
export const TIMELOCK_BASE_WALLET_PROGRAM_ERROR__INVALID_VAULT_MINT = 0x1774; // 6004
/** CustomError: Custom error message */
export const TIMELOCK_BASE_WALLET_PROGRAM_ERROR__CUSTOM_ERROR = 0x1775; // 6005

export type TimelockBaseWalletProgramError =
  | typeof TIMELOCK_BASE_WALLET_PROGRAM_ERROR__AMOUNT_MUST_BE_GREATER_THAN_ZERO
  | typeof TIMELOCK_BASE_WALLET_PROGRAM_ERROR__CUSTOM_ERROR
  | typeof TIMELOCK_BASE_WALLET_PROGRAM_ERROR__INVALID_VAULT_MINT
  | typeof TIMELOCK_BASE_WALLET_PROGRAM_ERROR__UNLOCK_TIMESTAMP_MUST_BE_IN_FUTURE
  | typeof TIMELOCK_BASE_WALLET_PROGRAM_ERROR__VAULT_LOCKED
  | typeof TIMELOCK_BASE_WALLET_PROGRAM_ERROR__VAULT_LOCKING;

let timelockBaseWalletProgramErrorMessages:
  | Record<TimelockBaseWalletProgramError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  timelockBaseWalletProgramErrorMessages = {
    [TIMELOCK_BASE_WALLET_PROGRAM_ERROR__AMOUNT_MUST_BE_GREATER_THAN_ZERO]: `Amount must be greater than zero`,
    [TIMELOCK_BASE_WALLET_PROGRAM_ERROR__CUSTOM_ERROR]: `Custom error message`,
    [TIMELOCK_BASE_WALLET_PROGRAM_ERROR__INVALID_VAULT_MINT]: `Invalid vault mint`,
    [TIMELOCK_BASE_WALLET_PROGRAM_ERROR__UNLOCK_TIMESTAMP_MUST_BE_IN_FUTURE]: `Unlock timestamp must be in the future`,
    [TIMELOCK_BASE_WALLET_PROGRAM_ERROR__VAULT_LOCKED]: `Vault is locked`,
    [TIMELOCK_BASE_WALLET_PROGRAM_ERROR__VAULT_LOCKING]: `Vault is locking`,
  };
}

export function getTimelockBaseWalletProgramErrorMessage(
  code: TimelockBaseWalletProgramError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      timelockBaseWalletProgramErrorMessages as Record<
        TimelockBaseWalletProgramError,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTimelockBaseWalletProgramError<
  TProgramErrorCode extends TimelockBaseWalletProgramError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
    code
  );
}
