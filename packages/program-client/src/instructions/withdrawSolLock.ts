/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_SOL_LOCK_DISCRIMINATOR = new Uint8Array([
  99, 187, 190, 4, 134, 136, 196, 79,
]);

export function getWithdrawSolLockDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_SOL_LOCK_DISCRIMINATOR
  );
}

export type WithdrawSolLockInstruction<
  TProgram extends string = typeof TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawSolLockInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type WithdrawSolLockInstructionDataArgs = {};

export function getWithdrawSolLockInstructionDataEncoder(): FixedSizeEncoder<WithdrawSolLockInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: WITHDRAW_SOL_LOCK_DISCRIMINATOR })
  );
}

export function getWithdrawSolLockInstructionDataDecoder(): FixedSizeDecoder<WithdrawSolLockInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawSolLockInstructionDataCodec(): FixedSizeCodec<
  WithdrawSolLockInstructionDataArgs,
  WithdrawSolLockInstructionData
> {
  return combineCodec(
    getWithdrawSolLockInstructionDataEncoder(),
    getWithdrawSolLockInstructionDataDecoder()
  );
}

export type WithdrawSolLockInput<
  TAccountSigner extends string = string,
  TAccountVault extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  vault: Address<TAccountVault>;
};

export function getWithdrawSolLockInstruction<
  TAccountSigner extends string,
  TAccountVault extends string,
  TProgramAddress extends
    Address = typeof TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
>(
  input: WithdrawSolLockInput<TAccountSigner, TAccountVault>,
  config?: { programAddress?: TProgramAddress }
): WithdrawSolLockInstruction<TProgramAddress, TAccountSigner, TAccountVault> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.signer), getAccountMeta(accounts.vault)],
    programAddress,
    data: getWithdrawSolLockInstructionDataEncoder().encode({}),
  } as WithdrawSolLockInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountVault
  >;

  return instruction;
}

export type ParsedWithdrawSolLockInstruction<
  TProgram extends string = typeof TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    vault: TAccountMetas[1];
  };
  data: WithdrawSolLockInstructionData;
};

export function parseWithdrawSolLockInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawSolLockInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      vault: getNextAccount(),
    },
    data: getWithdrawSolLockInstructionDataDecoder().decode(instruction.data),
  };
}
