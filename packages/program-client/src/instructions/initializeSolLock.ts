/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_SOL_LOCK_DISCRIMINATOR = new Uint8Array([
  129, 207, 142, 52, 191, 86, 74, 59,
]);

export function getInitializeSolLockDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_SOL_LOCK_DISCRIMINATOR
  );
}

export type InitializeSolLockInstruction<
  TProgram extends string = typeof TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeSolLockInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  unlockTimestamp: bigint;
};

export type InitializeSolLockInstructionDataArgs = {
  amount: number | bigint;
  unlockTimestamp: number | bigint;
};

export function getInitializeSolLockInstructionDataEncoder(): FixedSizeEncoder<InitializeSolLockInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['unlockTimestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_SOL_LOCK_DISCRIMINATOR })
  );
}

export function getInitializeSolLockInstructionDataDecoder(): FixedSizeDecoder<InitializeSolLockInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['unlockTimestamp', getI64Decoder()],
  ]);
}

export function getInitializeSolLockInstructionDataCodec(): FixedSizeCodec<
  InitializeSolLockInstructionDataArgs,
  InitializeSolLockInstructionData
> {
  return combineCodec(
    getInitializeSolLockInstructionDataEncoder(),
    getInitializeSolLockInstructionDataDecoder()
  );
}

export type InitializeSolLockAsyncInput<
  TAccountSigner extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  vault?: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: InitializeSolLockInstructionDataArgs['amount'];
  unlockTimestamp: InitializeSolLockInstructionDataArgs['unlockTimestamp'];
};

export async function getInitializeSolLockInstructionAsync<
  TAccountSigner extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeSolLockAsyncInput<
    TAccountSigner,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeSolLockInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getU64Encoder().encode(expectSome(args.amount)),
        getI64Encoder().encode(expectSome(args.unlockTimestamp)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeSolLockInstructionDataEncoder().encode(
      args as InitializeSolLockInstructionDataArgs
    ),
  } as InitializeSolLockInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeSolLockInput<
  TAccountSigner extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  vault: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: InitializeSolLockInstructionDataArgs['amount'];
  unlockTimestamp: InitializeSolLockInstructionDataArgs['unlockTimestamp'];
};

export function getInitializeSolLockInstruction<
  TAccountSigner extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeSolLockInput<
    TAccountSigner,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeSolLockInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeSolLockInstructionDataEncoder().encode(
      args as InitializeSolLockInstructionDataArgs
    ),
  } as InitializeSolLockInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeSolLockInstruction<
  TProgram extends string = typeof TIMELOCK_BASE_WALLET_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    vault: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeSolLockInstructionData;
};

export function parseInitializeSolLockInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeSolLockInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      vault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeSolLockInstructionDataDecoder().decode(instruction.data),
  };
}
